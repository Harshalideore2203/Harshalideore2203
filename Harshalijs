It seems like the iframe element is still not available when we're trying to add the event listener.

To fix this, we can use a different approach. Instead of adding an event listener to the iframe's load event, we can use a timeout to wait for the iframe to load. Here's an updated version of your code:

```
// Initialize variables
let vesselName = "ALGECIRAS EXPRESS"; // Replace with your vessel name
let eta = "2024-11-28"; // Replace with your ETA date
let FetchedETA = '';
let FetchedETD = '';
let ImportLVR = '';
let OutputVar = '';

// Calculate date range
let ETADate = new Date(eta);
let ETAvalplus1 = new Date(ETADate.getTime() + 86400000); // +1 day
let ETAvalplus2 = new Date(ETADate.getTime() + 172800000); // +2 days
let ETAvalplus3 = new Date(ETADate.getTime() + 259200000); // +3 days
let ETAvalplus4 = new Date(ETADate.getTime() + 345600000); // +4 days
let ETAvalplus5 = new Date(ETADate.getTime() + 432000000); // +5 days
let ETAvalminus1 = new Date(ETADate.getTime() - 86400000); // -1 day
let ETAvalminus2 = new Date(ETADate.getTime() - 172800000); // -2 days
let ETAvalminus3 = new Date(ETADate.getTime() - 259200000); // -3 days
let ETAvalminus4 = new Date(ETADate.getTime() - 345600000); // -4 days
let ETAvalminus5 = new Date(ETADate.getTime() - 432000000); // -5 days

// Function to handle iframe content
function iframeContent() {
    const iframe = document.querySelector('iframe');
    if (iframe) {
        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
        if (iframeDoc) {
            // Extract table rows from iframe content document
            const tableRows = iframeDoc.getElementsByTagName("tbody")[0].childNodes;
            console.log("tableRows.length : " + tableRows.length)

            // Loop through table rows
            for (let i = 0; i < tableRows.length; i++) {
                const row = tableRows[i];
                const vesselElement = row.getElementsByTagName("td")[1];
                console.log("Vessel " + i + " Name : " + vesselElement.textContent.trim());

                if (vesselElement.textContent.toLowerCase().trim() === vesselName.toLowerCase()) {
                    FetchedETA = row.getElementsByTagName("td")[5].textContent.trim();
                    console.log("FetchedETA : " + FetchedETA);
                    console.log("eta : " + eta);

                    // Check if ETA date matches the calculated date range
                    if (FetchedETA === eta || FetchedETA === ETAvalplus1.toISOString().split('T')[0] || FetchedETA === ETAvalplus2.toISOString().split('T')[0] || FetchedETA === ETAvalplus3.toISOString().split('T')[0] || FetchedETA === ETAvalplus4.toISOString().split('T')[0] || FetchedETA === ETAvalplus5.toISOString().split('T')[0] || FetchedETA === ETAvalminus1.toISOString().split('T')[0] || FetchedETA === ETAvalminus2.toISOString().split('T')[0] || FetchedETA === ETAvalminus3.toISOString().split('T')[0] || FetchedETA === ETAvalminus4.toISOString().split('T')[0] || FetchedETA === ETAvalminus5.toISOString().split('T')[0]) {

                        // Extract ETD date
                        FetchedETD = row.getElementsByTagName("td")[6].textContent.trim();

                        // Extract LVR (Voyage)
                        ImportLVR = row.getElementsByTagName("td")[3].textContent.trim();

                        // Construct output string
                        OutputVar = `Vessel: ${vesselName}, ETA: ${FetchedETA}, ETD: ${FetchedETD}, LVR: ${ImportLVR}`;
                    } else {
                        console.log("No matching Vessel Found with +- 5 days of ETA");
                    }
                    break;
                }
            }
            console.log("OutputVar : " + OutputVar);
        }
    }
}

// Wait for iframe to load
setTimeout(iframeContent, 1000);
```

This updated code uses a timeout to wait for the iframe to load. After 1 second, it calls the `iframeContent` function to process the iframe's content.
